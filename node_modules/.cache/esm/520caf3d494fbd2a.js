let _,CustomerService,Helpers,Response;_494‍.x([["default",()=>_494‍.o]]);_494‍.w("lodash",[["default",["_"],function(v){_=v}]]);_494‍.w("./customer.service",[["default",["CustomerService"],function(v){CustomerService=v}]]);_494‍.w("../../../utils/helper",[["default",["Helpers"],function(v){Helpers=v}]]);_494‍.w("../../../",[["Response",["Response"],function(v){Response=v}]]);/* eslint-disable import/no-named-as-default-member */
// eslint-disable-next-line import/no-extraneous-dependencies





/**
 * controllers that contains methods for managing customer endpoints
 * @class CustomerController
 */
class CustomerController {
  static async CustomerController(req, res) {
    // Destructure only the required field
    const { name, email, password, role } = req.body;

    // Normalize the email
    const trimmedEmail = email ? email.trim().toLowerCase() : null;

    // check if email already exists
    const customerExist = await _494‍.a("CustomerService",CustomerService).getCustomerByEmail({ email: trimmedEmail });
    if (customerExist) {
      return _494‍.a("Response",Response).error(res, 'Accout exist, Kindly proceed to the login Screen', 409);
    }
    // hashed the data before storing
    const hashedPassword = await _494‍.a("Helpers",Helpers).hashPassword(password);

    // Prepare the customer data for creation
    const CustomerData = {
      name,
      email: trimmedEmail,
      password: hashedPassword,
      role
    };

    // Create new Customer

    const customer = await _494‍.a("CustomerService",CustomerService).createCustomer(CustomerData);

    // send response with limited customer details
    _494‍.a("Response",Response).info(res, 'User created successfully!', 201, _494‍.a("_",_).pick(customer, ['name', 'role']));
  }
}
_494‍.d(CustomerController);
