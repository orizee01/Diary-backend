let fs,morgan,bodyParser,helmet,FileStreamRotator,loggerInit,routes,errorHandler,config;_b2f‍.x([["default",()=>_b2f‍.o]]);_b2f‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_b2f‍.w("morgan",[["default",["morgan"],function(v){morgan=v}]]);_b2f‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_b2f‍.w("helmet",[["default",["helmet"],function(v){helmet=v}]]);_b2f‍.w("file-stream-rotator",[["default",["FileStreamRotator"],function(v){FileStreamRotator=v}]]);_b2f‍.w("express-async-errors");_b2f‍.w("./logger",[["default",["loggerInit"],function(v){loggerInit=v}]]);_b2f‍.w("../routes/",[["default",["routes"],function(v){routes=v}]]);_b2f‍.w("./errorHandler",[["default",["errorHandler"],function(v){errorHandler=v}]]);_b2f‍.w(".",[["default",["config"],function(v){config=v}]]);/* eslint-disable import/extensions */
/* eslint-disable import/no-extraneous-dependencies */









// eslint-disable-next-line no-unused-vars


const logDirectory = './log';
const checkLogDir = _b2f‍.a("fs",fs).existsSync(logDirectory) || _b2f‍.a("fs",fs).mkdirSync(logDirectory);

const expressConfig = (app) => {
  let accessLogStream;
  let logger;

  // initialize logger
  if (app.get('env') === 'development') logger = _b2f‍.a("loggerInit",loggerInit)('development');
  else if (app.get('env') === 'production') logger = _b2f‍.a("loggerInit",loggerInit)('production');
  else if (app.get('env') === 'test') logger = _b2f‍.a("loggerInit",loggerInit)('test');
  else logger = _b2f‍.a("loggerInit",loggerInit)();

  global.logger = logger;
  logger.info('Application starting...');
  logger.debug("Overriding 'Express' logger");

  if (checkLogDir) {
    accessLogStream = _b2f‍.a("FileStreamRotator",FileStreamRotator).getStream({
      date_format: 'YYYYMMDD',
      filename: `${logDirectory}/access-%DATE%.log`,
      frequency: 'weekly',
      verbose: false,
    });
  }

  app.use(_b2f‍.a("morgan",morgan)('combined', { stream: accessLogStream }));

  app.use(_b2f‍.a("bodyParser",bodyParser).json());
  app.use(_b2f‍.a("bodyParser",bodyParser).urlencoded({ extended: false }));

  // Use helmet to secure Express headers
  app.use(_b2f‍.a("helmet",helmet)());
  app.disable('x-powered-by');

  app.use((req, res, next) => {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
    res.setHeader('Access-Control-Allow-Headers', 'Authorization, Origin, Content-Type, Accept');
    res.setHeader('Access-Control-Allow-Credentials', true);
    next();
  });

  app.use('/v1/', _b2f‍.a("routes",routes));
  app.use(_b2f‍.a("errorHandler",errorHandler));

  // catch 404 and forward to error handler
  app.use((req, res, next) => {
    const err = new Error('Not Found');
    err.status = 404;
    next(err);
  });

  // error handlers

  // development error handler
  // will print stacktrace
  if (app.get('env') === 'development' || app.get('env') === 'test') {
    app.use((err, req, res) => res.status(err.status || 500)
      .json({
        message: err.message,
        error: err,
      }));
  }

  // production error handler
  // remove stacktrace
  app.use((err, req, res) => res.status(err.status || 500).json({ message: err.message }));
};

_b2f‍.d(expressConfig);
