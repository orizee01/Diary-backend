let bcrypt,Chance;_c34‍.x([["hashPassword",()=>hashPassword],["generateToken",()=>generateToken],["generateOTP",()=>generateOTP]]);_c34‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_c34‍.w("chance",[["default",["Chance"],function(v){Chance=v}]]);/* eslint-disable import/no-extraneous-dependencies */




const chance = new Chance();
/**
 * This is used for generating a hash and a salt from a String.
 * @param {string} password - String to be encrypted.
 * @memberof Helper
 * @returns {Object} - An object containing the hash and salt of a String.
*/

       const hashPassword = (password) => bcrypt.hash(password, 10);

/**
 * This generates a token
 * @static
 * @memberof Helper
 * @returns { string | number } - generate unique token.
 */
       const generateToken = (length) => chance.string({ length, alpha: true, numeric: true });
       const generateOTP = (length) => chance.string({ length, numeric: true });
