let _,CustomerService,customResponse,Helpers;_e64‍.x([["default",()=>_e64‍.o]]);_e64‍.w("lodash",[["default",["_"],function(v){_=v}]]);_e64‍.w("./customer.service",[["default",["CustomerService"],function(v){CustomerService=v}]]);_e64‍.w("../../../utils",[["customResponse",["customResponse"],function(v){customResponse=v}],["Helpers",["Helpers"],function(v){Helpers=v}]]);/* eslint-disable import/no-named-as-default-member */
// eslint-disable-next-line import/no-extraneous-dependencies



/**
 * controllers that contains methods for managing customer endpoints
 * @class CustomerController
 */
class CustomerController {
  static async CustomerController(req, res) {
    // Destructure only the required field
    const { name, email, password, role } = req.body;

    // Normalize the email
    const trimmedEmail = email ? email.trim().toLowerCase() : null;

    // check if email already exists
    const customerExist = await CustomerService.getCustomerByEmail({ email: trimmedEmail });
    if (customerExist) {
      return Response.error(res, 'Accout exist, Kindly proceed to the login Screen', 409);
    }
    // hashed the data before storing
    const hashedPassword = await Helpers.hashPassword(password);

    // Prepare the customer data for creation
    const CustomerData = {
      name,
      email: trimmedEmail,
      password: hashedPassword,
      role
    };

    // Create new Customer

    const customer = await CustomerService.createCustomer(CustomerData);

    // send response with limited customer details
    Response.info(res, 'User created successfully!', 201, _.pick(customer, ['name', 'role']));
  }
}
_e64‍.d(CustomerController);
