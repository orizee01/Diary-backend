/* eslint-disable no-unused-vars */
/* eslint-disable import/no-extraneous-dependencies */
import winston from 'winston';
// import { PapertrailConnection, PapertrailTransport } from 'winston-papertrail';

winston.emitErrs = true;

// const papertrailConnection = new PapertrailConnection({
//   host: `${process.env.PAYSMOSMO_PAPERTRAIL_HOST}`.split('\r')[0],
//   port: process.env.PAYSMOSMO_PAPERTRAIL_PORT
// });

const logger = (env) => {
  let ret;

  if (env === 'production') {
    ret = new winston.Logger({
      transports: [
        new winston.transports.Console({
          level: 'error',
          handleExceptions: true,
          json: false,
          colorize: true,
        }),
      ],
      exitOnError: false,
    });
  } else if (env === 'development') {
    ret = new winston.Logger({
      transports: [
        new winston.transports.Console({
          level: 'debug',
          handleExceptions: true,
          json: false,
          colorize: true,
        }),
        new winston.transports.File({
          level: 'info',
          filename: './server.log',
          handleExceptions: true,
          json: true,
          maxsize: 5242880, // 5MB
          maxFiles: 5,
          colorize: false,
        }),
        // new PapertrailTransport(papertrailConnection, {hostname: 'paysmosmo-backend'})
      ],
      exitOnError: false,
    });
  } else if (env === 'test') {
    ret = new winston.Logger({
      transports: [
        new winston.transports.File({
          level: 'info',
          filename: './test.log',
          handleExceptions: true,
          json: true,
          maxsize: 5242880, // 5MB
          maxFiles: 50,
          colorize: false,
        }),
      ],
      exitOnError: false,
    });
  } else {
    // Else return default logger
    return new winston.Logger({
      transports: [
        new winston.transports.Console({
          level: 'debug',
          handleExceptions: true,
          json: false,
          colorize: true,
        }),
      ],
      exitOnError: false,
    });
  }

  ret.stream = {
    write: (message, _encoding) => {
      logger.info(message);
    },
  };

  return ret;
};

export default logger;
